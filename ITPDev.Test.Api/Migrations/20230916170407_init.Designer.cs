// <auto-generated />
using System;
using ITPDev.Test.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ITPDev.Test.Api.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230916170407_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ITPDev.Test.Domain.Aggregates.ProjectAggregate.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ITPDev.Test.Domain.Aggregates.ProjectAggregate.Project", b =>
                {
                    b.OwnsMany("ITPDev.Test.Domain.Aggregates.ProjectAggregate.Values.AssignmentValue.Assignment", "Assignments", b1 =>
                        {
                            b1.Property<Guid>("ProjectId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CancelAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("StartAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("ProjectId", "Id");

                            b1.ToTable("Assignment");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");

                            b1.OwnsOne("ITPDev.Test.Domain.Aggregates.ProjectAggregate.Values.CommentValue.Comment", "Comment", b2 =>
                                {
                                    b2.Property<Guid>("AssignmentProjectId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("AssignmentId")
                                        .HasColumnType("uuid");

                                    b2.Property<byte[]>("Content")
                                        .HasColumnType("bytea");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Type")
                                        .HasColumnType("integer");

                                    b2.HasKey("AssignmentProjectId", "AssignmentId");

                                    b2.ToTable("Assignment");

                                    b2.WithOwner()
                                        .HasForeignKey("AssignmentProjectId", "AssignmentId");
                                });

                            b1.Navigation("Comment")
                                .IsRequired();
                        });

                    b.Navigation("Assignments");
                });
#pragma warning restore 612, 618
        }
    }
}
